import requests
import pdfplumber
import math

GEMINI_API_KEY = "AIzaSyAUJWlANalizPlnIJkhYQuRWrz6uaHo8kk"
MODEL = "models/gemini-2.0-flash"
ENDPOINT = f"https://generativelanguage.googleapis.com/v1beta/{MODEL}:generateContent"

# Chunk size: adjust for Gemini's limit (6000-9000 chars is usually safe for v2 models)
CHUNK_SIZE = 9000

def extract_text_chunks(pdf_path, chunk_size=CHUNK_SIZE):
    with pdfplumber.open(pdf_path) as pdf:
        text = ""
        for page in pdf.pages:
            t = page.extract_text()
            if t:
                text += t + "\n"
    # Split into chunks
    return [text[i:i+chunk_size] for i in range(0, len(text), chunk_size)]

def ask_gemini(context, question):
    prompt = (
        "You are an expert in insurance policy analysis. "
        "Using the following document content, answer the question as clearly, completely, and concisely as a human expert would. "
        "If the answer is present, summarize and rephrase it in plain English, and quote if appropriate. "
        "If the answer is given in a table, list, or footnote, include it. "
        "If the document does not specify the answer, reply exactly: Not specified in the document.\n\n"
        f"Document Content:\n{context}\n\n"
        f"Question: {question}\n\n"
        "Answer:"
    )
    request_body = {
        "contents": [
            {
                "parts": [
                    {"text": prompt}
                ]
            }
        ]
    }
    response = requests.post(
        ENDPOINT,
        headers={
            "Content-Type": "application/json",
            "X-goog-api-key": GEMINI_API_KEY
        },
        json=request_body
    )
    if not response.ok:
        raise Exception(f"Gemini API Error: {response.status_code} {response.text}")
    data = response.json()
    if not data.get("candidates"):
        raise Exception("No answer generated by Gemini API.")
    return data["candidates"][0]["content"]["parts"][0]["text"]

def answer_questions_from_pdf(pdf_path, questions):
    chunks = extract_text_chunks(pdf_path)
    answers = []
    for q in questions:
        chunk_answers = []
        for chunk in chunks:
            try:
                ans = ask_gemini(chunk, q).strip()
                if ans and ans.lower() != "not specified in the document.":
                    # Take the first non-"not specified" answer and break
                    chunk_answers = [ans]
                    break
                elif not chunk_answers:
                    chunk_answers = [ans]  # store "not specified" as fallback
            except Exception as e:
                chunk_answers.append(f"Error: {e}")
        answers.append(chunk_answers[0])
    return answers